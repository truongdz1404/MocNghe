// app/api/ai-chat/route.ts
import { NextRequest, NextResponse } from 'next/server';
import ProductServices from '@/services/ProductServices';

const GEMINI_API_KEY = process.env.NEXT_PUBLIC_GEMINI_API_KEY!;

export async function POST(req: NextRequest) {
    const { question } = await req.json();

    const products = await ProductServices.GetAll();

    const productContext = products
        .map(
            (p) =>
                `- ${p.title}: ${p.description}, m√†u: ${p.availableColors}, k√≠ch th∆∞·ªõc: ${p.availableSizes}`
        )
        .join('\n');

    const prompt = `
        B·∫°n l√† m·ªôt ng∆∞·ªùi b·∫°n th√¢n thi·∫øt, am hi·ªÉu v·ªÅ ƒë·ªì decor g·ªó v√† lu√¥n s·∫µn s√†ng chia s·∫ª nh·ªØng g·ª£i √Ω tuy·ªát v·ªùi cho kh√¥ng gian s·ªëng.
        
        Danh s√°ch s·∫£n ph·∫©m hi·ªán c√≥:
        ${productContext}
        
        Ng∆∞·ªùi d√πng n√≥i: "${question}"
        
         üö´ Khi ng∆∞·ªùi d√πng h·ªèi nh·ªØng c√¢u kh√¥ng li√™n quan ƒë·∫øn s·∫£n ph·∫©m/decor/n·ªôi th·∫•t:
        - Tr·∫£ l·ªùi ng·∫Øn g·ªçn, l·ªãch s·ª±
        - Sau ƒë√≥ h∆∞·ªõng v·ªÅ s·∫£n ph·∫©m: "M√¨nh chuy√™n t∆∞ v·∫•n v·ªÅ ƒë·ªì decor g·ªó ƒë√≥! B·∫°n c√≥ mu·ªën xem qua nh·ªØng m√≥n ƒë·ªì trang tr√≠ ƒë·∫πp cho nh√† kh√¥ng?"
        - G·ª£i √Ω 1-2 s·∫£n ph·∫©m hot nh·∫•t

        üéØ C√°ch tr√≤ chuy·ªán:
        - Tr·∫£ l·ªùi nh∆∞ ƒëang chat v·ªõi b·∫°n b√®: th√¢n thi·ªán, g·∫ßn g≈©i, d·ªÖ hi·ªÉu
        - S·ª≠ d·ª•ng emoji v√† icon ph√π h·ª£p ƒë·ªÉ t·∫°o c·∫£m gi√°c vui v·∫ª
        - D√πng d·∫•u ch·∫•m (1. 2. 3.), g·∫°ch ƒë·∫ßu d√≤ng (-) ho·∫∑c icon ƒë·ªÉ tr√¨nh b√†y ƒë·∫πp m·∫Øt
        - KH√îNG d√πng d·∫•u "*" hay "***"
        - N·∫øu th√¥ng tin s·∫£n ph·∫©m ch∆∞a ƒë·ªß, h√£y b·ªï sung chi ti·∫øt h·ª£p l√Ω ƒë·ªÉ ng∆∞·ªùi d√πng d·ªÖ h√¨nh dung
        
        üí° M·∫πo nh·ªè:
        - C√≥ th·ªÉ h·ªèi th√™m v·ªÅ kh√¥ng gian, phong c√°ch, ng√¢n s√°ch ƒë·ªÉ t∆∞ v·∫•n ch√≠nh x√°c h∆°n
        - Lu√¥n t·∫°o c·∫£m gi√°c nh∆∞ ƒëang t∆∞ v·∫•n cho ng∆∞·ªùi th√¢n
        - K·∫øt th√∫c b·∫±ng c√¢u h·ªèi m·ªü ƒë·ªÉ ti·∫øp t·ª•c cu·ªôc tr√≤ chuy·ªán
        `;

    const geminiResponse = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`,
        {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                contents: [
                    {
                        parts: [{ text: prompt }]
                    }
                ]
            })
        }
    );
  

    if (!geminiResponse.ok) {
        return NextResponse.json(
            { reply: 'Xin l·ªói, c√≥ l·ªói x·∫£y ra khi g·ªçi Gemini API.' },
            { status: 500 }
        );
    }

    const data = await geminiResponse.json();
    const reply = data.candidates?.[0]?.content?.parts?.[0]?.text ?? 'Xin l·ªói, kh√¥ng c√≥ ph·∫£n h·ªìi.';

    return NextResponse.json({ reply });
}
